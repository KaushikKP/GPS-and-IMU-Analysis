"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import exlcm.node_t

class node_t(object):
    __slots__ = ["num_children", "children"]

    def __init__(self):
        self.num_children = 0
        self.children = []

    def encode(self):
        buf = BytesIO()
        buf.write(node_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.num_children))
        for i0 in range(self.num_children):
            assert self.children[i0]._get_packed_fingerprint() == node_t._get_packed_fingerprint()
            self.children[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != node_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return node_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = node_t()
        self.num_children = struct.unpack(">i", buf.read(4))[0]
        self.children = []
        for i0 in range(self.num_children):
            self.children.append(node_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if node_t in parents: return 0
        newparents = parents + [node_t]
        tmphash = (0x98ff4a363aeb7273+ node_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if node_t._packed_fingerprint is None:
            node_t._packed_fingerprint = struct.pack(">Q", node_t._get_hash_recursive([]))
        return node_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

