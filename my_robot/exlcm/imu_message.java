/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package exlcm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class imu_message implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public double yaw;
    public double pitch;
    public double roll;
    public double magx;
    public double magy;
    public double magz;
    public double accelx;
    public double accely;
    public double accelz;
    public double gyrox;
    public double gyroy;
    public double gyroz;
 
    public imu_message()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x9b3dbdfee216ca23L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(exlcm.imu_message.class))
            return 0L;
 
        classes.add(exlcm.imu_message.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        outs.writeDouble(this.yaw); 
 
        outs.writeDouble(this.pitch); 
 
        outs.writeDouble(this.roll); 
 
        outs.writeDouble(this.magx); 
 
        outs.writeDouble(this.magy); 
 
        outs.writeDouble(this.magz); 
 
        outs.writeDouble(this.accelx); 
 
        outs.writeDouble(this.accely); 
 
        outs.writeDouble(this.accelz); 
 
        outs.writeDouble(this.gyrox); 
 
        outs.writeDouble(this.gyroy); 
 
        outs.writeDouble(this.gyroz); 
 
    }
 
    public imu_message(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public imu_message(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static exlcm.imu_message _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        exlcm.imu_message o = new exlcm.imu_message();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.yaw = ins.readDouble();
 
        this.pitch = ins.readDouble();
 
        this.roll = ins.readDouble();
 
        this.magx = ins.readDouble();
 
        this.magy = ins.readDouble();
 
        this.magz = ins.readDouble();
 
        this.accelx = ins.readDouble();
 
        this.accely = ins.readDouble();
 
        this.accelz = ins.readDouble();
 
        this.gyrox = ins.readDouble();
 
        this.gyroy = ins.readDouble();
 
        this.gyroz = ins.readDouble();
 
    }
 
    public exlcm.imu_message copy()
    {
        exlcm.imu_message outobj = new exlcm.imu_message();
        outobj.timestamp = this.timestamp;
 
        outobj.yaw = this.yaw;
 
        outobj.pitch = this.pitch;
 
        outobj.roll = this.roll;
 
        outobj.magx = this.magx;
 
        outobj.magy = this.magy;
 
        outobj.magz = this.magz;
 
        outobj.accelx = this.accelx;
 
        outobj.accely = this.accely;
 
        outobj.accelz = this.accelz;
 
        outobj.gyrox = this.gyrox;
 
        outobj.gyroy = this.gyroy;
 
        outobj.gyroz = this.gyroz;
 
        return outobj;
    }
 
}

