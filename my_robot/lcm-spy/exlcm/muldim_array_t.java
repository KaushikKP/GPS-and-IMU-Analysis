/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package exlcm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class muldim_array_t implements lcm.lcm.LCMEncodable
{
    public int size_a;
    public int size_b;
    public int size_c;
    public int data[][][];
    public String strarray[][];
 
    public muldim_array_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x1e012473deb4cfbbL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(exlcm.muldim_array_t.class))
            return 0L;
 
        classes.add(exlcm.muldim_array_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeInt(this.size_a); 
 
        outs.writeInt(this.size_b); 
 
        outs.writeInt(this.size_c); 
 
        for (int a = 0; a < this.size_a; a++) {
            for (int b = 0; b < this.size_b; b++) {
                for (int c = 0; c < this.size_c; c++) {
                    outs.writeInt(this.data[a][b][c]); 
                }
            }
        }
 
        for (int a = 0; a < 2; a++) {
            for (int b = 0; b < this.size_c; b++) {
                __strbuf = new char[this.strarray[a][b].length()]; this.strarray[a][b].getChars(0, this.strarray[a][b].length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
            }
        }
 
    }
 
    public muldim_array_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public muldim_array_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static exlcm.muldim_array_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        exlcm.muldim_array_t o = new exlcm.muldim_array_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.size_a = ins.readInt();
 
        this.size_b = ins.readInt();
 
        this.size_c = ins.readInt();
 
        this.data = new int[(int) size_a][(int) size_b][(int) size_c];
        for (int a = 0; a < this.size_a; a++) {
            for (int b = 0; b < this.size_b; b++) {
                for (int c = 0; c < this.size_c; c++) {
                    this.data[a][b][c] = ins.readInt();
                }
            }
        }
 
        this.strarray = new String[(int) 2][(int) size_c];
        for (int a = 0; a < 2; a++) {
            for (int b = 0; b < this.size_c; b++) {
                __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.strarray[a][b] = new String(__strbuf);
            }
        }
 
    }
 
    public exlcm.muldim_array_t copy()
    {
        exlcm.muldim_array_t outobj = new exlcm.muldim_array_t();
        outobj.size_a = this.size_a;
 
        outobj.size_b = this.size_b;
 
        outobj.size_c = this.size_c;
 
        outobj.data = new int[(int) size_a][(int) size_b][(int) size_c];
        for (int a = 0; a < this.size_a; a++) {
            for (int b = 0; b < this.size_b; b++) {
                if (this.size_c > 0)
                    System.arraycopy(this.data[a][b], 0, outobj.data[a][b], 0, this.size_c);            }
        }
 
        outobj.strarray = new String[(int) 2][(int) size_c];
        for (int a = 0; a < 2; a++) {
            if (this.size_c > 0)
                System.arraycopy(this.strarray[a], 0, outobj.strarray[a], 0, this.size_c);        }
 
        return outobj;
    }
 
}

